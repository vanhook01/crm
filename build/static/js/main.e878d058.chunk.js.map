{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","_jsxs","children","_jsx","AppBar","position","className","Toolbar","Typography","variant","Container","maxWidth","Card","CardContent","Button","color","sendWebVitalsData","data","fetch","method","headers","body","JSON","stringify","then","response","ok","Error","catch","error","console","onReportWebVitals","metric","name","startTime","value","ReactDOM","render","React","StrictMode","document","getElementById","serviceWorkerRegistration","reportWebVitals"],"mappings":"yTAsCeA,MAlCf,WACI,OACIC,eAAA,OAAAC,SAAA,CACIC,cAACC,IAAM,CAACC,SAAS,SAASC,UAAU,SAAQJ,SACxCC,cAACI,IAAO,CAAAL,SACJC,cAACK,IAAU,CAACC,QAAQ,KAAIP,SAAC,gBAIjCD,eAACS,IAAS,CAACC,SAAS,KAAKL,UAAU,YAAWJ,SAAA,CAC1CC,cAACK,IAAU,CAACC,QAAQ,KAAKH,UAAU,kBAAiBJ,SAAC,uBAErDC,cAACS,IAAI,CAACN,UAAU,OAAMJ,SAClBD,eAACY,IAAW,CAAAX,SAAA,CACRC,cAACK,IAAU,CAACC,QAAQ,KAAIP,SAAC,cACzBC,cAACK,IAAU,CAACC,QAAQ,QAAOP,SAAC,+CAIpCC,cAACS,IAAI,CAACN,UAAU,OAAMJ,SAClBD,eAACY,IAAW,CAAAX,SAAA,CACRC,cAACK,IAAU,CAACC,QAAQ,KAAIP,SAAC,cACzBC,cAACK,IAAU,CAACC,QAAQ,QAAOP,SAAC,gDAIpCC,cAACW,IAAM,CAACL,QAAQ,YAAYM,MAAM,UAAUT,UAAU,aAAYJ,SAAC,qBAMnF,E,QCjCA,SAASc,EAAkBC,GAKvBC,MAHe,uCAGD,CACVC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUN,KAEpBO,MAAK,SAAAC,GACF,IAAKA,EAASC,GACV,MAAM,IAAIC,MAAM,gDAExB,IACCC,OAAM,SAAAC,GACHC,QAAQD,MAAMA,EAClB,GACR,CAoCeE,MAjCf,SAA2BC,GACvB,OAAQA,EAAOC,MACX,IAAK,aAGDjB,EAAkB,CAAEiB,KADeD,EAA3BC,KACkBC,UADSF,EAArBE,UACuBC,MADFH,EAAVG,QAEzB,MAEJ,IAAK,oBAGDnB,EAAkB,CAAEiB,KADID,EAAhBC,KACkBE,MADFH,EAAVG,QAEd,MAEJ,IAAK,2BAGDnB,EAAkB,CAAEiB,KADeD,EAA3BC,KACkBC,UADSF,EAArBE,UACuBC,MADFH,EAAVG,QAerC,EClDAC,IAASC,OACLlC,cAACmC,IAAMC,WAAU,CAAArC,SACbC,cAACH,EAAG,MAERwC,SAASC,eAAe,SAG5BC,aAEAC,G","file":"static/js/main.e878d058.chunk.js","sourcesContent":["import React from 'react';\nimport { Container, AppBar, Toolbar, Typography, Button, Card, CardContent } from '@mui/material';\nimport './App.css';\n\nfunction App() {\n    return (\n        <div>\n            <AppBar position=\"static\" className=\"header\">\n                <Toolbar>\n                    <Typography variant=\"h6\">CRM App</Typography>\n                </Toolbar>\n            </AppBar>\n\n            <Container maxWidth=\"md\" className=\"container\">\n                <Typography variant=\"h4\" className=\"section-heading\">Welcome to Our CRM</Typography>\n\n                <Card className=\"card\">\n                    <CardContent>\n                        <Typography variant=\"h5\">Feature 1</Typography>\n                        <Typography variant=\"body1\">This is the first feature of our CRM.</Typography>\n                    </CardContent>\n                </Card>\n\n                <Card className=\"card\">\n                    <CardContent>\n                        <Typography variant=\"h5\">Feature 2</Typography>\n                        <Typography variant=\"body1\">This is the second feature of our CRM.</Typography>\n                    </CardContent>\n                </Card>\n\n                <Button variant=\"contained\" color=\"primary\" className=\"cta-button\">\n                    Get Started\n                </Button>\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","// reportWebVitals.js\n\n// Function to send web vitals data to your backend API\nfunction sendWebVitalsData(data) {\n    // Add your API endpoint URL here\n    const apiUrl = 'http://localhost:5000/api/web-vitals';\n\n    // Use fetch or any other HTTP library to send the data to the server\n    fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n    })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error('Failed to send web vitals data to the server.');\n            }\n        })\n        .catch(error => {\n            console.error(error);\n        });\n}\n\n// Function to record web vitals and send data to the server\nfunction onReportWebVitals(metric) {\n    switch (metric.name) {\n        case 'navigation': {\n            // This is a navigation timing metric\n            const { name, startTime, value } = metric;\n            sendWebVitalsData({ name, startTime, value });\n            break;\n        }\n        case 'first-input-delay': {\n            // This is a first input delay metric\n            const { name, value } = metric;\n            sendWebVitalsData({ name, value });\n            break;\n        }\n        case 'largest-contentful-paint': {\n            // This is a largest contentful paint metric\n            const { name, startTime, value } = metric;\n            sendWebVitalsData({ name, startTime, value });\n            break;\n        }\n        // Add more cases for other web vitals if needed\n        // case 'cumulative-layout-shift':\n        //   // ...\n        //   break;\n        // case 'layout-shift':\n        //   // ...\n        //   break;\n        default:\n            // Do nothing for unknown metrics\n            break;\n    }\n}\n\nexport default onReportWebVitals;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();\n\nreportWebVitals();\n"],"sourceRoot":""}